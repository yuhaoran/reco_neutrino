! :: cubepm header file

#include "cubepm.par"

! :: mpi variables

integer(4), dimension(0:nodes_dim-1,0:nodes_dim-1) :: slab_neighbor
integer(4), dimension(0:nodes_dim-1) :: pen_neighbor_to
integer(4), dimension(0:nodes_dim-1) :: pen_neighbor_fm
integer(4), dimension(6) :: cart_neighbor
integer(4), dimension(3) :: slab_coord, cart_coords
integer(4) :: slab_rank, mpi_comm_cart, cart_rank, rank, ierr
#ifdef SUBV
  integer(4) :: rank_global,cart_coords_global(3)
#endif
integer(8) :: plan, iplan, fftw2_plan(cores), fftw2_iplan(cores)

logical :: firstfftw, firstfftw_nest
logical, dimension(cores) :: firstfftw2
logical :: force_grid_back

! :: simulation variables

integer(4) :: wc_counter, count_i,count_f,count_r,nts, np_local
real(4) :: a, a_mid, t, tau, dt, dt_old, dt_gas, mass_p, dt_f_acc, dt_vmax, da, dt_c_acc, freeze
real(4) :: shake_offset(3), cur_sep, dt_pp_acc,dt_pp_ext_acc, dt_max_v, kill_time
#ifdef NEUTRINOS
integer(4) :: nuPIDmap
#endif
#ifdef BOXDUMP
integer(4), dimension(nsubcubex*nsubcubey*nsubcubez) :: nsubcuberanks
#endif
#ifdef COARSEPROJ
real(4), dimension(3) :: soffcproj
logical :: doCoarseProj
real(4), dimension(0:nc_node_dim+1, 0:nc_node_dim+1, 0:nc_node_dim+1) :: crhoproj
real(4), dimension(nc_node_dim, nc_node_dim) :: crhoprojsum
#ifdef NEUTRINOS
real(4), dimension(0:nc_node_dim+1, 0:nc_node_dim+1, 0:nc_node_dim+1) :: crhoproj_nu
real(4), dimension(nc_node_dim, nc_node_dim) :: crhoprojsum_nu
#endif 
#endif

! :: checkpoint and projection variables

real(4), dimension(max_input) :: z_projection,a_projection, &
         z_checkpoint,a_checkpoint,z_halofind,a_halofind
integer(4) :: num_checkpoints, num_projections, cur_checkpoint, &
         cur_projection,num_halofinds,cur_halofind
logical :: checkpoint_step, projection_step, halofind_step, final_step

! :: fine mesh arrays

real(4), dimension(nf_tile+2,nf_tile,nf_tile,cores)    			:: rho_f
real(4), dimension(nf_tile+2,nf_tile,nf_tile,cores)    			:: cmplx_rho_f 
real(4), dimension(3,nf_tile/2+1,nf_tile,nf_tile) 			:: kern_f
real(4), dimension(3,nf_buf-1:nf_tile-nf_buf+1, &
          nf_buf-1:nf_tile-nf_buf+1,nf_buf-1:nf_tile-nf_buf+1,cores)   	:: force_f
real(4)                                 :: f_force_max(cores, nested_threads)
real(4)                                 :: pp_force_max(cores, nested_threads), pp_ext_force_max(cores)
real(8)									:: f_mesh_mass(cores)

! :: pp arrays

integer(4), dimension(max_llf,mesh_scale,mesh_scale,mesh_scale,cores,nested_threads) :: llf
!real(4), dimension(3,max_llf,mesh_scale,mesh_scale,mesh_scale,cores) :: vel_state
real(4), dimension(3,max_llf,cores,nested_threads) :: pp_force_accum
#ifdef PP_EXT
real(4), dimension(3,max_np,cores) :: pp_ext_force_accum
integer(4), dimension(max_np,cores) :: ll_fine
integer(4), dimension(nf_physical_tile_dim+2*pp_range,nf_physical_tile_dim+2*pp_range,nf_physical_tile_dim+2*pp_range,cores) :: hoc_fine
#endif

! :: coarse mesh arrays

real(4), dimension(3,nc_node_dim,nc_node_dim,nc_node_dim)	 	:: ck
real(4), dimension(3, nc_dim/2, nc_node_dim, nc_pen+2)                  :: kern_c
real(4), dimension(3, nc_dim, nc_node_dim, nc_pen+2)                    :: tmp_kern_c
real(4), dimension(nc_node_dim,nc_node_dim,nc_node_dim) 		:: rho_c
real(4), dimension(3,0:nc_node_dim+1,0:nc_node_dim+1,0:nc_node_dim+1) 	:: force_c
real(4), dimension(nc_dim, nc_node_dim, nc_pen+2)                       ::  cmplx_rho_c
real(4), dimension(3,0:nc_node_dim+1,0:nc_node_dim+1) 			:: force_c_buffer
real(4), dimension(2,nc_dim)						:: ps_c, ps_c_sum

! :: mpi arrays

real(4), dimension(nc_dim, nc_node_dim, nc_pen+2)                       :: slab, slab_work
real(4), dimension(nc_node_dim,nc_node_dim, nc_pen, 0:nodes_pen-1)      :: recv_cube
real(4), dimension(max_buf) 						:: send_buf,recv_buf
real(4), dimension(max_buf)						:: fast_buf
integer(4), dimension(max_buf/2)					:: fast_pos
#ifdef PID_FLAG
#ifdef NEUTRINOS
#ifdef NUPID
integer(8), dimension(max_buf)                        :: send_buf_PID, recv_buf_PID
#else
integer(1), dimension(max_buf)                        :: send_buf_PID, recv_buf_PID
#endif
#else
integer(8), dimension(max_buf)                        :: send_buf_PID, recv_buf_PID
#endif
#endif

! :: particle arrays

real(4), dimension(6,max_np) 						:: xv
integer(4), dimension(max_np) 						:: ll
#ifdef PID_FLAG
#ifdef NEUTRINOS
#ifdef NUPID
integer(8), dimension(max_np)                       :: PID
#else
integer(1), dimension(max_np)                       :: PID
#endif
#else
integer(8), dimension(max_np)                       :: PID
#endif
#endif
integer(4), dimension(hoc_nc_l:hoc_nc_h,hoc_nc_l:hoc_nc_h,hoc_nc_l:hoc_nc_h) :: hoc
integer(4) 								:: np_buf
real(4) :: min_den_buf

! density projection arrays

#ifndef NOPROJ
real(4), dimension(nf_physical_dim,nf_physical_dim)        :: rp_buf,rho_pxy,rho_pxz,rho_pyz
#endif

! arrays storing modification to mass_p for -DNEUTRINOS simulation
real(4), dimension(2) :: mass_p_nudm_fac

#if defined(ZIP) || defined(ZIPDM)
#ifdef ZIPDM
integer(4), dimension(nc_node_dim) :: rhoc_i4
integer(1), dimension(3, max_cell_np, nc_node_dim) :: pos_i1
integer(2), dimension(3, max_cell_np, nc_node_dim) :: vel_i2
#else
integer(4), dimension(nc_node_dim) :: rhoc_i4
real(4), dimension(6, max_cell_np, nc_node_dim) :: pos_i1
integer(2) :: vel_i2
#endif
#ifdef NEUTRINOS
#ifdef ZIP
integer(4), dimension(nc_node_dim) :: rhoc_i4_nu
integer(1), dimension(3, max_cell_np, nc_node_dim) :: pos_i1_nu
integer(2), dimension(3, max_cell_np, nc_node_dim) :: vel_i2_nu
#else
integer(4), dimension(nc_node_dim) :: rhoc_i4_nu
real(4), dimension(6, max_cell_np, nc_node_dim) :: pos_i1_nu
integer(2) :: vel_i2_nu
#endif
#ifdef NUPID
integer(8), dimesnion(max_cell_np, nc_node_dim) :: pid_i8_nu
#endif
#endif
#endif

! :: halofinding arrays

integer(8) :: search_fail
integer(4) :: irtot, nhalo
integer(4), dimension(max_halo_np) :: isortpos
integer(4), dimension(nlist)       :: isortdist
integer(4), dimension(3,nlist)     :: idist
integer(4), dimension(max_maxima)  :: isortpeak
real(4), dimension(3, max_maxima)  :: ipeak
real(4), dimension(max_maxima)     :: den_peak
real(4), dimension(max_halo_np, 4) :: pos
real(4), dimension(nlist)          :: rdist
real(4), dimension(max_maxima)     :: halo_mesh_mass
real(4), dimension(ngrid_max, ngrid_max, ngrid_max) :: finegrid
integer(4), dimension(max_halo_np) :: ilist_odc, ilist_vir
integer(1)                         :: hpart_odc(max_np), hpart_vir(max_np)

real(4), dimension(3, 1) :: halo_x_mean !! NEED TO FIX THIS
real(4), dimension(1)    :: halo_imass  !! NEED TO FIX THIS

! For pencils decomposition:
integer(4) :: pen_dims(2), istart(3), iend(3), isize(3),fstart(3), fend(3), fsize(3), mypadd

! :: equivalence compatible memory locations -- some of these will need reversing for large runs

equivalence (isortpos, isortdist, isortpeak)

equivalence (force_f, force_c)

equivalence (rho_f, rho_c)

equivalence (send_buf, force_c_buffer, fast_buf, slab_work) 

!equivalence (cmplx_rho_f, tmp_kern_c) 
equivalence (tmp_kern_c, cmplx_rho_f) 

equivalence (recv_buf, recv_cube, fast_pos)

equivalence (xv, ck)

common /divar / plan, iplan, fftw2_plan, fftw2_iplan

#ifdef PID_FLAG
common / divarp / PID, send_buf_PID, recv_buf_PID
#endif

#ifdef NOPROJ
common / drvar / f_mesh_mass
#else
common / drvar / rho_pxy, rho_pxz, rho_pyz, rp_buf, f_mesh_mass
#endif

#ifdef BOXDUMP
common / bdvar / nsubcuberanks
#endif

#if defined(ZIP) || defined(ZIPDM)
common / zipvar / rhoc_i4, pos_i1, vel_i2
#ifdef NEUTRINOS
common / zipvarnu / rhoc_i4_nu, pos_i1_nu, vel_i2_nu
#ifdef NUPID
common / izipvar / pid_i8_nu
#endif
#endif
#endif

#ifdef PP_EXT
common / eppvarr / pp_ext_force_accum
common / eppvari / ll_fine, hoc_fine
#endif

#ifdef COARSEPROJ
common / crprvv / soffcproj, doCoarseProj 
#ifdef NEUTRINOS
common / crprvr / crhoproj, crhoproj_nu, crhoprojsum, crhoprojsum_nu
#else
common / crprvr / crhoproj, crhoprojsum
#endif
#endif

common / lvar / min_den_buf

common / ivar / slab_rank, num_projections, num_checkpoints, &
                slab_coord, slab_neighbor, pen_neighbor_to, pen_neighbor_fm, mpi_comm_cart, cur_projection, cur_checkpoint, &
                cart_rank, cart_neighbor, cart_coords, rank, ierr, &
                wc_counter, count_i, count_r, count_f, nts, np_local, ll, llf, hoc, np_buf, &
                num_halofinds, cur_halofind, idist, ipeak, nhalo, irtot, ilist_odc, ilist_vir, &
                pen_dims, istart, iend, isize,fstart, fend, fsize, mypadd 
                
common / rvar / a, a_mid, t, tau, dt, dt_old, dt_gas, mass_p, mass_p_nudm_fac, kern_f, &
                kern_c, slab, f_force_max, pp_force_max, &
                dt_f_acc, dt_vmax, dt_pp_acc, dt_pp_ext_acc, da, dt_c_acc, a_projection, z_projection, a_checkpoint, &
                z_checkpoint, a_halofind, z_halofind, kill_time, ps_c, ps_c_sum, freeze, &
                den_peak, rdist, cmplx_rho_c, &
                shake_offset, cur_sep, dt_max_v, pp_force_accum, &
                pos, halo_mesh_mass, finegrid

common / reportforcevar / halo_x_mean, halo_imass

common / i8var / search_fail

common / i1var / hpart_odc, hpart_vir

common / equiv1 / isortpos

common / equiv2 / force_f

common / equiv3 / rho_f

common / equiv4 / send_buf

!common / equiv5 / cmplx_rho_f
common / equiv5 /  tmp_kern_c 

common / equiv6 / recv_buf 

common / equiv7 / xv

common / lvar / firstfftw, firstfftw_nest, firstfftw2, projection_step, checkpoint_step, halofind_step, final_step, force_grid_back
#ifdef SUBV
  common / var_haloonly / rank_global,cart_coords_global !! haloonly
#endif
